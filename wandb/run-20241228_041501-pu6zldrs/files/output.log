/kaggle/input/cifa-10/train
/kaggle/input/cifa-10/test
32
Found 50000 images belonging to 10 classes.
Found 10000 images belonging to 10 classes.
Conv1 7x7
Stage 1: Conv2_x2
Traceback (most recent call last):
  File "/kaggle/working/channel_and_spatial_attentions_with_cnn/train.py", line 198, in <module>
    main()
  File "/kaggle/working/channel_and_spatial_attentions_with_cnn/train.py", line 110, in main
    model = ResNet(model_name="ResNet18", input_shape=(args.image_size, args.image_size, args.image_channels),
  File "/kaggle/working/channel_and_spatial_attentions_with_cnn/model_cnn_v2.py", line 99, in ResNet
    x = stage(x, [64, 64, 256], num_blocks[0], stride1=1, name='Conv2_x{}'.format(num_blocks[0]), attention=attention)
  File "/kaggle/working/channel_and_spatial_attentions_with_cnn/layers_v2.py", line 75, in stage
    x = residual_block(x, filters, stride=stride1, name=name + '_Block1', attention=attention)
  File "/kaggle/working/channel_and_spatial_attentions_with_cnn/layers_v2.py", line 57, in residual_block
    x = select_attention(x, filter_num=filters3, attention_type=attention, layer_name='Attention_{}'.format(name))
  File "/kaggle/working/channel_and_spatial_attentions_with_cnn/layers_v2.py", line 9, in select_attention
    feature = cbam_block(feature, filter_num, reduction_ratio=ratio, name=layer_name + "_CBAM_")
  File "/kaggle/working/channel_and_spatial_attentions_with_cnn/attentions_module.py", line 55, in cbam_block
    avg_pool2 = tf.reduce_mean(channel_output, axis=3, keepdims=True)  # spatial avgpool
  File "/usr/local/lib/python3.10/dist-packages/tensorflow/python/ops/weak_tensor_ops.py", line 88, in wrapper
    return op(*args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/tensorflow/python/util/traceback_utils.py", line 153, in error_handler
    raise e.with_traceback(filtered_tb) from None
  File "/usr/local/lib/python3.10/dist-packages/keras/src/backend/common/keras_tensor.py", line 91, in __tf_tensor__
    raise ValueError(
ValueError: A KerasTensor cannot be used as input to a TensorFlow function. A KerasTensor is a symbolic placeholder for a shape and dtype, used when constructing Keras Functional models or Keras Functions. You can only use it as input to a Keras layer or a Keras operation (from the namespaces `keras.layers` and `keras.operations`). You are likely doing something like:

```
x = Input(...)
...
tf_fn(x)  # Invalid.
```

What you should do instead is wrap `tf_fn` in a layer:

```
class MyLayer(Layer):
    def call(self, x):
        return tf_fn(x)

x = MyLayer()(x)
```
